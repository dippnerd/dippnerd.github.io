<?xml version="1.0" encoding="utf-8"?>

<feed xmlns="http://www.w3.org/2005/Atom" >
  <generator uri="https://jekyllrb.com/" version="3.7.4">Jekyll</generator>
  <link href="/tag/swiftui/feed.xml" rel="self" type="application/atom+xml" />
  <link href="/" rel="alternate" type="text/html" />
  <updated>2020-02-21T08:33:18-05:00</updated>
  <id>/tag/swiftui/feed.xml</id>

  
  
  

  
    <title type="html">dippnerd | </title>
  

  
    <subtitle>things to nerd out about</subtitle>
  

  

  
    
      
    
  

  
  

  
    <entry>
      <title type="html">Catalyst - the future of Mac apps?</title>
      <link href="/mac-catalyst" rel="alternate" type="text/html" title="Catalyst - the future of Mac apps?" />
      <published>2020-02-05T20:27:06-05:00</published>
      <updated>2020-02-05T20:27:06-05:00</updated>
      <id>/mac-catalyst</id>
      <content type="html" xml:base="/mac-catalyst">&lt;p&gt;Back in June 2019 at WWDC Apple announced Mac Catalyst, a new way to build apps that share one common codebase that can run across iPadOS, iOS and macOS. Very shortly after this announcement, they also announced the new SwiftUI, an easy way to create apps for Mac, iPad, iPhone, etc. Immediately people were joking about how Apple announced and promptly killed Catalyst in the same presentation, but I don’t think this is quite the case.&lt;/p&gt;

&lt;p&gt;First, a little deeper dive into Catalyst. What this was pitched as is a way to write an iOS/iPadOS app, and with little to no effort (it’s literally as simple as checking a box!) you can magically add support for macOS. We saw some demo apps of this in iOS 12 the year before (Stocks, Voice Recorder, Home) that were less than ideal, but technically got the job done. Where these apps didn’t exist before on macOS, suddenly they did.&lt;/p&gt;

&lt;p&gt;Unfortunately there’s a lot of small details that weren’t quite so painless. Most apps won’t be as simple as just checking a box, you’ll likely need to separate out some code that differentiates between platforms for both UI appeal, but also functionality (or lack there of in some cases) that differs. Those problems aside, it is still an impressive feat to consider how much &lt;em&gt;less&lt;/em&gt; effort it takes to build an app with Catalyst compared to building two completely separate apps.&lt;/p&gt;

&lt;p&gt;Heading back to SwiftUI, the thing that gets easily overlooked in this debate of SwiftUI vs Catalyst is that SwiftUI is still only one piece of the puzzle. It’s also a piece that is compatible with Catalyst, whose roots go far deeper than just the UI. SwiftUI is a great way to “declare” your UI, but it doesn’t do much else, it’s not meant to. Catalyst, however, is responsible for not only UI, but also a lot of other underlying frameworks and APIs that aren’t necessarily exposed to macOS apps the same way.&lt;/p&gt;

&lt;p&gt;When writing an app for iOS, then learning macOS, it is quick to see they both share some things, and act wildly different with others. If you want, you can write separate iOS and macOS apps using SwiftUI and the respective frameworks for each platform, but ultimately you’ll be still doing twice the work. When using SwiftUI &lt;em&gt;with&lt;/em&gt; Catalyst, you can share a common codebase. It’s easy to miss the difference, but it is there.&lt;/p&gt;

&lt;p&gt;Traditionally, macOS apps have been built using a framework called AppKit, while iOS apps use UIKit. They are very uniquely separate frameworks for different tasks, but this is why SwiftUI alone does not mean you get two apps from one codebase. Catalyst, in a sense, is a sort of “translator” of your code, to allow it to run on macOS. Behind the scenes, while I’m not entirely sure what Apple does to make this work, I suspect it’s an effort that is not being replaced immediately with SwiftUI.&lt;/p&gt;

&lt;p&gt;I believe Catalyst is more of a long-term strategy at Apple to not only share apps across platforms, but to also bring the platforms themselves closer together. There are still so many thing macOS is lacking that iOS/iPadOS have (or at least can do better). The same could be said on the reverse. The tricky part is figuring out where to draw lines in the sand for any of this. Catalyst feels like Apple saying “we prefer the iOS way of building apps, so if you want iOS functionality, this is the way”.&lt;/p&gt;

&lt;p&gt;While we don’t have 100% feature parity with Catalyst yet, it is still young. I think what we’ll see down the road is the expansion of features like Siri Shortcuts or the Shortcuts app, but only available to Catalyst apps. If you build an app with SwiftUI but via AppKit as a standalone app, you’ll not only have to maintain a separate codebase from your iOS app, but you’ll also miss out on features that Catalyst provides from iOS. This makes sense in a lot of ways, as it means users who want AppKit can still use it, but over time it will stop getting new features and eventually even get dropped altogether (probably not for a while though).&lt;/p&gt;

&lt;p&gt;Speaking of Siri Shortcuts, this would be the easy way to avoid having to add support for Shortcuts to legacy apps. Only Catalyst apps get these features, AppKit gets left behind. Sure, developers can still make AppKit apps, and will make great ones I’m sure, but to get that “iOS on Mac” experience, it’ll have to be Catalyst.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;tl;dr&lt;/strong&gt;: Catalyst is way more than just UI, while SwiftUI is basically just UI (hence the name). To get a true cross-platform, one-codebase end result, Catalyst is a way safer bet than SwiftUI+AppKit/UIKit. Expect features to be exclusive to Catalyst instead of AppKit over time.&lt;/p&gt;</content>

      
      
      
      
      

      <author>
          <name>Aaron Dippner</name>
        
        
      </author>

      

      
        <category term="apple" />
      
        <category term="mac" />
      
        <category term="catalyst" />
      
        <category term="swift" />
      
        <category term="swiftui" />
      

      
        <summary type="html">Back in June 2019 at WWDC Apple announced Mac Catalyst, a new way to build apps that share one common codebase that can run across iPadOS, iOS and macOS. Very shortly after this announcement, they also announced the new SwiftUI, an easy way to create apps for Mac, iPad, iPhone, etc. Immediately people were joking about how Apple announced and promptly killed Catalyst in the same presentation, but I don’t think this is quite the case.</summary>
      

      
      
    </entry>
  
    <entry>
      <title type="html">SwiftUI - Using Timer for UI refreshes</title>
      <link href="/swiftui-timer-ui-refresh" rel="alternate" type="text/html" title="SwiftUI - Using Timer for UI refreshes" />
      <published>2019-07-25T14:16:26-04:00</published>
      <updated>2019-07-25T14:16:26-04:00</updated>
      <id>/swiftui-timer-ui-refresh</id>
      <content type="html" xml:base="/swiftui-timer-ui-refresh">&lt;p&gt;At WWDC this year, one of Apple’s biggest announcements wasn’t a particular feature of the new OSes, but rather a new way to write UIs for your apps using Swift. This new framework, named SwiftUI, uses a declaritive syntax to easily define your UI in far fewer lines of code than before. Along with SwiftUI, Apple announced another framework, Combine, which helps with handling asynchronous events. This post won’t dive into the fundamentals of either of these, there are plenty of others out there already. Instead, this post is intended to work through some challenges I ran into when trying to upgrade my app, &lt;a href=&quot;https://itunes.apple.com/us/app/just-timers/id1453573845?ls=1&amp;amp;mt=8&quot;&gt;Just Timers&lt;/a&gt;, to use SwiftUI.&lt;/p&gt;

&lt;p&gt;When I wrote Just Timers, I used UIKit by pushing my content into a UITableView, pretty standard. A nice feature of UITableView for an app that needs the UI to constantly refresh is the ability to simply use a timer to repeat at a given interval and run a method that refreshes your table, like so:&lt;/p&gt;

&lt;div class=&quot;language-swift highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kt&quot;&gt;Timer&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;scheduledTimer&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;timeInterval&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;target&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;selector&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;#selector(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;TimerViewController.refreshCells&lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;userInfo&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;nil&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;repeats&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;The &lt;code class=&quot;highlighter-rouge&quot;&gt;refreshCells&lt;/code&gt; method iterates over the visible cells of the table and changes various parts of the UI depending on what values the object in that cell is in. If a value changed from paused to running, the button gets updated to reflect this; if the timer expired, the UI changes color, etc. Calling the method on a reoccuring timer is easy, but updating your UI in here can get rather complex very fast.&lt;/p&gt;

&lt;p&gt;Meanwhile, in SwiftUI, you can very easily describe your UI by breaking it into multiple views, each responsible for their own piece of the picture. You track each state inside of the given view, then when the view is updated, whatever state each piece is in gets reflected in the UI. This vastly simplifies both your UI code and keeping track of states, but it posed a new problem I wasn’t quite prepared for:  Something like &lt;code class=&quot;highlighter-rouge&quot;&gt;refreshCells&lt;/code&gt; doesn’t work the same way here. We don’t reference individual cells like UITableView, everything is just defined in the UI and changes when the state of that view changes.&lt;/p&gt;

&lt;p&gt;Enter Combine. In order to utilize Timer in a way that will allow my views to “subscribe” to it firing, we need to create a wrapper class that will house our timer. Using Combine, we make this wrapper a BindableObject and add the necessary requirements. Effectively, this class will contain our timer instance, then every time the timer fires, it will call the willChange method to let subscribers know it just fired off an event.&lt;/p&gt;
&lt;div class=&quot;language-swift highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;SwiftUI&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Combine&lt;/span&gt;

&lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;TimerWrapper&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;ObservableObject&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;objectWillChange&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;ObservableObjectPublisher&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;timer&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Timer&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;start&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;withTimeInterval&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;interval&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Double&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mf&quot;&gt;0.1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;timer&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;?&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;invalidate&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;timer&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Timer&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;scheduledTimer&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;withTimeInterval&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;interval&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;repeats&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;_&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;in&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;objectWillChange&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;send&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    
    &lt;span class=&quot;kd&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;stop&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;timer&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;?&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;invalidate&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;We’ll need a way to reference this timer in SwiftUI, so next we go to our SceneDelegate and update scene(…willConnectTo) to create our timer instance and pass it into the root view controller as an environment object:&lt;/p&gt;
&lt;div class=&quot;language-swift highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;windowScene&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;scene&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;as?&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;UIWindowScene&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;window&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;UIWindow&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;windowScene&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;windowScene&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;window&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;rootViewController&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;UIHostingController&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;rootView&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;contentView&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;environmentObject&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;timerObject&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;environmentObject&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;timerWrapper&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;window&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;window&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;window&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;makeKeyAndVisible&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Keep in mind we created our instance of TimerWrapper and have to start it (providing an interval in seconds). This instance will remain active in SceneDelegate, and by utilizing &lt;code class=&quot;highlighter-rouge&quot;&gt;.environmentObject&lt;/code&gt; we can make this instance accessible anywhere in our code now.&lt;/p&gt;

&lt;p&gt;Now, anywhere we want our UI to update with this given interval, just add this to your view:&lt;/p&gt;
&lt;div class=&quot;language-swift highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;@EnvironmentObject&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;timerWrapper&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;TimerWrapper&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;You don’t need to do anything else with that value. By simply referencing it in your view, the publisher will automatically nofify each view that is subscribed, causing them to redraw their view due to the state change.&lt;/p&gt;

&lt;p&gt;Something to consider:  It’s easy to think &lt;em&gt;“I’ll just put this on my root view and everything will update!”&lt;/em&gt; Technically this is true, but in my experience it causes buttons and other interactions to become difficult to use. Instead, consider the views that will need updated specifically. In my case, the string that displays my timer’s current value is the only thing that needs updated by this timer. By putting that into its own view, you not only simplify code by separating it, but you can also reference the timer wrapper in this view only to prevent the entire UI getting bogged down.&lt;/p&gt;

&lt;p&gt;I hope this helps anyone out trying to something similar. I didn’t come to all of this on my own, credit goes to &lt;a href=&quot;https://stackoverflow.com/a/56905649/9012764&quot;&gt;this Stack Overflow answer&lt;/a&gt; and &lt;a href=&quot;https://www.reddit.com/r/iOSProgramming/comments/cf219v/force_swiftui_list_contents_to_update/eu6rk28/&quot;&gt;this response&lt;/a&gt; to my problem on Reddit.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;&lt;em&gt;Update 21 February 2020:&lt;/em&gt;&lt;/strong&gt; &lt;em&gt;SwiftUI and Combine had some growing pains through the beta periods and have changed along the way. The code snippets above have been updated with current changes, like ‘willChange’ becoming ‘objectWillChange’.&lt;/em&gt;&lt;/p&gt;</content>

      
      
      
      
      

      <author>
          <name>Aaron Dippner</name>
        
        
      </author>

      

      
        <category term="apple" />
      
        <category term="swiftui" />
      
        <category term="timers" />
      

      
        <summary type="html">At WWDC this year, one of Apple’s biggest announcements wasn’t a particular feature of the new OSes, but rather a new way to write UIs for your apps using Swift. This new framework, named SwiftUI, uses a declaritive syntax to easily define your UI in far fewer lines of code than before. Along with SwiftUI, Apple announced another framework, Combine, which helps with handling asynchronous events. This post won’t dive into the fundamentals of either of these, there are plenty of others out there already. Instead, this post is intended to work through some challenges I ran into when trying to upgrade my app, Just Timers, to use SwiftUI.</summary>
      

      
      
    </entry>
  
</feed>
